//2005.2.12 by anyguo
#include<iostream>

using namespace std;
template<class T>
class Matrix
{
  public:
	  Matrix();
	  Matrix(int,int);
	  Matrix(const Matrix<T>&);
	  ~Matrix();
	  int Rows()const;
	  int Cols()const;
	  T& operator()(int,int)const;
	  void inputitem(const T[] ,int);
	  Matrix<T>& operator=(const Matrix<T>&);
	  Matrix<T> operator+(const Matrix<T>&)const;//+,-,*的返回值类型不能是引用的,否则后果严重!!这是为什么呢??????
	  Matrix<T> operator-(const Matrix<T>&)const;
	  Matrix<T> operator*(const Matrix<T>&)const;
	  Matrix<T>& operator+=(const T&);
      void print()const; 
  protected:
	  int rows;
	  int cols;
      T * element;
};
template<class T>
Matrix<T>::Matrix()
{
    rows=cols=0;
	element=new T[0];
}
template<class T>
Matrix<T>::Matrix(int r=0,int c=0)
{
	if(r<0||c<0)
	{
	   cout<<"invalid index."<<endl;
	   exit(0);
	}
	if((r||c)&&(!r||!c))
	{
	   cout<<"invalid index."<<endl;
	   exit(0);
	}
     rows=r;
	 cols=c;
	 element=new T[r*c];
}
template<class T>
Matrix<T>::Matrix(const Matrix<T>&m)
{
     rows=m.rows;
	 cols=m.cols;
	 int s=rows*cols;
	 element=new T [s];
	 for(int i=0;i<s;i++)
		 element[i]=m.element[i];
}
template<class T>
Matrix<T>::~Matrix()
{
     delete []element;
}
template<class T>
int  Matrix<T>::Rows()const
{
     return rows;
}
template<class T>
int  Matrix<T>::Cols()const
{
     return cols;
}
template<class T>
T& Matrix<T>::operator()(int r,int c)const
{
	if(r<0||c<0||r>rows||c>cols)
	{
	    cout<<"invalid index."<<endl;
		exit(0);
	}
	if((r||c)&&(!r||!c))
	{
	    cout<<"invalid index."<<endl;
		exit(0);
	}
	return element[(r-1)*cols+c-1];
}
template<class T>
void Matrix<T>::inputitem(const T  items[],int s)
{
     for(int i=0;i<s;i++)
		 element[i]=items[i];
}
template<class T>
Matrix<T>& Matrix<T>::operator=(const Matrix<T>& m)
{
	if(this!=&m)
	{
		delete [] element;
	    rows=m.rows;
		cols=m.cols;
		int s=rows*cols;
		element=new T[s];
		for(int i=0;i<s;i++)
			element[i]=m.element[i];
	    return *this;
	}
	else
	{
		cout<<"copy itself,invalid."<<endl;
        exit(0);
	}
}
template<class T>
Matrix<T> Matrix<T>::operator+(const Matrix<T>& m)const
{
    if((cols!=m.cols)||(rows!=m.rows))
	{
	    cout<<"invalid adding"<<endl;
		exit(0);
	}
	Matrix<T> t(rows,cols);
    for(int i=0;i<cols*rows;i++)
		t.element[i]=element[i]+m.element[i];
    return t;
}
template<class T>
Matrix<T> Matrix<T>::operator-(const Matrix<T>& m)const
{
    if((cols!=m.cols)||(rows!=m.rows))
	{
	   cout<<"invalid decrease."<<endl;
	   exit(0);
	}
	Matrix<T> t(rows,cols);
	for(int i=0;i<cols*rows;i++)
		t.element[i]=element[i]-m.element[i];
    return t;
}
template<class T>
Matrix<T> Matrix<T>::operator*(const Matrix<T> & m)const
{
	if(cols!=m.rows)
	{
	   cout<<"invalid *."<<endl;
	   exit(0);
	}   
	Matrix<T> t(rows,m.cols);
	int ct=0,cm=0,cw=0;
	for(int i=1;i<=rows;i++)
	{
		for(int j=1;j<=m.cols;j++)
		{
		    T sum=element[ct]*m.element[cm];
			for(int k=2;k<=cols;k++)
			{
				   ct++;
				   cm+=m.cols;
				   sum+=element[ct]*m.element[cm];
			}
            t.element[cw++]=sum;
			ct-=cols-1;//??
			cm=j;
		} 
		ct+=cols;
		cm=0;
	}
	return t;
}
template<class T>
Matrix<T>& Matrix<T>::operator+=(const T& x)
{
     for(int i=0;i<cols*rows;i++)
		 element[i]=element[i]+x;
	 return *this;
}
template<class T>
void Matrix<T>::print()const
{
   for(int i=0;i<rows;i++)
   {
	   for(int j=0;j<cols;j++)
	   {
	       cout<<element[i*cols+j]<<"  ";
	   }
	   cout<<endl;
   }
}

void main()
{
    int r,c;
	cout<<"enter the rows and cols of the matrix:";
    cin>>r>>c;
    Matrix<int> m1(r,c),m2,m3;
	int * num=new int[r*c];
    cout<<"enter the element of the "<<r<<'*'<<c<<" matrix:";
	for(int i=0;i<r*c;i++)
        cin>>num[i];
    m1.inputitem(num,r*c);
	cout<<"m1:"<<endl;
	m1.print();
	m2=m1;
	m1+=1;
    cout<<"after adding 1 to the matrix,m1:"<<endl;
	m1.print();
    cout<<endl<<"m2:"<<endl;
	m2.print();
	cout<<endl<<"new m2:"<<endl;
	m2=m2+m1;
	m2.print();
	m3=m1*m2;
	cout<<endl<<"m3:"<<endl;
	m3.print();
}
